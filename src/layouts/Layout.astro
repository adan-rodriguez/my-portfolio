---
import "@fontsource-variable/onest";

import Footer from "../ui/components/Footer.astro";
import Header from "../ui/components/Header.astro";
import ButtonUp from "../ui/components/ButtonUp.astro";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/images/favicon.png" />
    <title>{title}</title>
    <meta
      name="description"
      content="Soy un desarrollador web junior especializado en React, Next.js y Astro. En mi portafolio encontrar치s m치s informaci칩n sobre mi y conocer치s todos mis proyectos."
    />
    <script is:inline>
      const storageTheme = localStorage.getItem("theme");

      const theme = storageTheme
        ? storageTheme
        : window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";

      document.documentElement.setAttribute("data-theme", theme);
    </script>
    <style is:inline>
      :root {
        --text-color-primary: rgb(248 250 252);
        --text-color-secondary: rgb(203 213 225);
        --color-primary: rgb(3 93 143);
        --color-primary-rgb: 3 93 143;
        --color-secondary: rgb(55 65 81);
        --bg-color: rgb(2 6 23);
        --bg-grid-color: rgba(3, 94, 143, 0.3);
        --bg-grid-size: 64px;
        --noise: url(/images/noise-dark.webp);
        --mix-mode-me-img: lighten;
        --mix-mode-intro-links: difference;
        --mix-mode-travolta: difference;
        --main-gradient: radial-gradient(transparent, var(--bg-color)),
          repeating-linear-gradient(
            to bottom,
            var(--bg-grid-color) 0 1px,
            transparent 1px var(--bg-grid-size)
          ),
          repeating-linear-gradient(
            to right,
            var(--bg-grid-color) 0 1px,
            transparent 1px var(--bg-grid-size)
          ),
          var(--noise);
        --shadow-black-lg: rgba(0, 0, 0, 0) 0px 0px 0px 0px,
          rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgb(0, 0, 0) 0px 10px 15px -3px,
          rgb(0, 0, 0) 0px 4px 6px -4px;

        scroll-behavior: smooth;
        /* scrollbar-gutter: stable; */
        scrollbar-width: thin;
        scrollbar-color: var(--color-secondary) var(--bg-color);
      }

      :root {
        & #moon {
          display: none;
        }

        &[data-theme="light"] {
          & #moon {
            display: block;
          }

          & #sun {
            display: none;
          }
        }
      }

      :root[data-theme="light"] {
        --text-color-primary: rgb(2 6 23);
        --text-color-secondary: rgb(31 41 55);
        --bg-color: rgb(248 250 252);
        --noise: url(/images/noise-ligth.webp);
        --mix-mode-me-img: multiply;
        --mix-mode-intro-links: multiply;
        --mix-mode-travolta: hard-light;
      }

      body {
        font-family: "Onest Variable", sans-serif;
        color: var(--text-color-primary);
        background-color: var(--bg-color);
        background-image: var(--main-gradient);
        background-attachment: fixed;
        background-blend-mode: luminosity;
        overflow-x: hidden;
      }

      main {
        max-width: 58rem;
        margin: auto;
        padding: 0 1rem;
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <slot />
    </main>
    <Footer />
    <ButtonUp />
  </body>
</html>

<script>
  const $root = document.documentElement;
  const $themeBtn = document.querySelector("#theme-btn");

  function setAttributes(theme) {
    $root.setAttribute("data-theme", theme);
    $themeBtn.setAttribute(
      "aria-label",
      `Cambiar a modo ${theme === "dark" ? "claro" : "oscuro"}`
    );
  }

  function toggleTheme() {
    const newTheme = $root.dataset.theme === "dark" ? "light" : "dark";
    setAttributes(newTheme);
    localStorage.setItem("theme", newTheme);
  }

  function changeColorScheme(e) {
    const newTheme = e.matches ? "dark" : "light";
    setAttributes(newTheme);
  }

  const colorScheme = window.matchMedia("(prefers-color-scheme: dark)");

  colorScheme.addEventListener("change", (e) => {
    if (!document.startViewTransition) return changeColorScheme(e);
    document.startViewTransition(() => changeColorScheme(e));
  });

  $themeBtn.addEventListener("click", () => {
    if (!document.startViewTransition) return toggleTheme();
    document.startViewTransition(() => toggleTheme());
  });
</script>

<style is:global>
  body {
    &:has(#modal-cv[open]) {
      overflow-y: hidden;
    }
  }

  p {
    text-wrap: pretty;
  }

  input,
  textarea {
    &:focus-visible {
      outline: none;
    }
  }
</style>
