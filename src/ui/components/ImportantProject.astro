---
import Badge from "./Badge.astro";
import LinkIcon from "../icons/LinkIcon.astro";
import GitHubIcon from "../icons/GitHubIcon.astro";

const { name, description, image, favicon, technologies, link, github } =
  Astro.props;
---

<li class="important-card">
  <figure>
    <img src={`/images/${image}`} alt={`Portada de ${name}`} />
  </figure>
  <div class="important-card__info">
    <div class="important-card__info-name">
      <img
        src={`/images/favicons/${favicon}`}
        alt={`Favicon de ${name}`}
        width="24px"
        height="24px"
      />
      <h3>{name}</h3>
    </div>
    <ul aria-label="Tecnologías utilizadas en el proyecto">
      {
        technologies.map(({ name, image, color }) => (
          <Badge name={name} image={image} color={color} />
        ))
      }
    </ul>
    <p>{description}</p>
    <div class="important-card__info-buttons">
      <a href={link} target="_blank" rel="noopener noreferrer">
        <LinkIcon /> Deploy</a
      >
      {
        github && (
          <a
            href="https://github.com/adan-rodriguez/el-villanense-next-js"
            target="_blank"
            rel="noopener noreferrer"
          >
            <GitHubIcon width="16" height="16" />
            Código
          </a>
        )
      }
    </div>
  </div>
</li>

<style>
  li {
    --text-color-primary: rgb(248 250 252);
    --text-color-secondary: rgb(203 213 225);

    display: flex;
    flex-direction: column;
    border-radius: 1rem;
    overflow: clip;
    overflow-clip-margin: 3px;
    position: relative;
    background-color: var(--color-secondary);
    box-shadow: var(--shadow-black-lg);
    transition:
      transform 0.1s,
      opacity 1s,
      translate 1s;

    @media (scripting: enabled) {
      opacity: 0;
      translate: 0 100px;

      &.animate {
        opacity: 1;
        translate: 0;
      }
    }

    @media (width >= 576px) {
      flex-direction: row;
    }

    &::after {
      content: "";
      display: block;
      opacity: 0;
      position: absolute;
      inset: -1000%;
      background-image: conic-gradient(
        from 90deg at 50% 50%,
        #0369a1 0%,
        #000000 50%,
        #0369a1 100%
      );
      animation: spin 2s linear infinite;
      z-index: -10;
      transition: opacity 1s;
    }

    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }

    &:is(:hover, :focus-within) {
      & > figure:first-child > img {
        scale: 1.05;
      }

      &:after {
        opacity: 1;
      }
    }
  }

  figure {
    aspect-ratio: 3/2;
    overflow: hidden;
    border-radius: 1rem 1rem 0 0;

    @media (width >= 576px) {
      width: 50%;
      border-radius: 1rem 0 0 1rem;
    }

    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: left;
      transition: scale 0.5s;
    }
  }

  .important-card__info {
    width: 100%;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    row-gap: 1rem;
    background-image: var(--noise),
      linear-gradient(to top, black, var(--color-secondary));
    background-blend-mode: soft-light;
    border-radius: 0 0 1rem 1rem;

    @media (width >= 576px) {
      width: 50%;
      background-image: var(--noise),
        linear-gradient(to left, black, var(--color-secondary));
      border-radius: 0 1rem 1rem 0;
    }

    & .important-card__info-name {
      display: flex;
      column-gap: 0.5rem;
      align-items: center;

      & h3 {
        font-size: 1.5rem;
        font-weight: 700;
        text-wrap: balance;
        line-height: normal;
        color: var(--text-color-primary);
      }
    }

    & ul {
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
    }

    & p {
      font-size: 0.875rem;
      color: var(--text-color-secondary);
      text-wrap: pretty;
    }

    & .important-card__info-buttons {
      display: flex;
      margin-top: auto;

      & a {
        display: flex;
        align-items: center;
        column-gap: 0.25rem;
        padding: 0.25rem 1.25rem;
        border-radius: 0.25rem;
        background-color: var(--color-secondary);
        color: var(--text-color-primary);
        box-shadow: var(--shadow-black-lg);
        transition:
          background-color 0.3s,
          scale 0.3s;
        font-size: 0.875rem;

        &:is(:hover, :focus-visible) {
          background-color: var(--color-primary);
          scale: 1.05;
        }

        &:active {
          translate: 0 0.125rem;
        }
      }
    }
  }
</style>

<script>
  const $$cards = document.querySelectorAll(
    ".important-card"
  ) as NodeListOf<HTMLElement>;

  const observerCallback = (entries, observer) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("animate");
        observer.unobserve(entry.target);
      }
    });
  };

  const observer = new IntersectionObserver(observerCallback, {
    threshold: 0.1,
  });

  $$cards.forEach(($card) => {
    $card.addEventListener("mousemove", (e) => {
      const { layerX, layerY, target } = e;
      const { clientWidth, clientHeight } = target.closest(".important-card");

      const yRotation = ((layerX - clientWidth / 2) / clientWidth) * 2;
      const xRotation = ((layerY - clientHeight / 2) / clientHeight) * 2;

      $card.style.transform = `perspective(500px) rotateX(${-xRotation}deg) rotateY(${yRotation}deg)`;
    });

    $card.addEventListener("mouseleave", () => {
      $card.style.transform = "perspective(500px) rotateX(0) rotateY(0)";
    });

    observer.observe($card);
  });
</script>
