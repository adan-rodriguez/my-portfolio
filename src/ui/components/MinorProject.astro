---
import GitHubIcon from "../icons/GitHubIcon.astro";
import LinkIcon from "../icons/LinkIcon.astro";
import Badge from "./Badge.astro";

const { name, image, favicon, description, technologies, link, github } =
  Astro.props;
---

<li class="project-card">
  <figure>
    <img src={`/images/${image}`} alt={`Portada de ${name}`} loading="lazy" />
  </figure>
  <div class="project-card__info">
    <div class="project-card__info--name">
      <img
        src={`/images/favicons/${favicon}`}
        alt={`Favicon de ${name}`}
        width="20px"
        height="20px"
        loading="lazy"
      />
      <h3>{name}</h3>
    </div>
    <ul aria-label="Tecnologías utilizadas en el proyecto">
      {
        technologies.map(({ name, image, color }) => (
          <Badge name={name} image={image} color={color} />
        ))
      }
    </ul>
    <p>
      {description}
    </p>

    <div class="project-card__info--buttons">
      <a href={link} target="_blank" rel="noopener noreferrer"
        ><LinkIcon /> Deploy</a
      >
      <a href={github} target="_blank" rel="noopener noreferrer"
        ><GitHubIcon width="16" height="16" /> Código</a
      >
    </div>
  </div>
</li>

<script>
  const $$cards = document.querySelectorAll(
    ".project-card"
  ) as NodeListOf<HTMLElement>;

  const observerCallback = (entries, observer) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("animate");
        observer.unobserve(entry.target);
      }
    });
  };

  const observer = new IntersectionObserver(observerCallback, {
    threshold: 0.1,
  });

  $$cards.forEach(($card) => {
    observer.observe($card);
  });
</script>

<style>
  .project-card {
    --text-color-primary: rgb(248 250 252);
    --text-color-secondary: rgb(203 213 225);

    display: flex;
    flex-direction: column;
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: var(--shadow-black-lg);
    opacity: 0;
    translate: 0 100px;
    transition:
      opacity 1s,
      translate 1s,
      transform 0.3s,
      filter 0.3s;

    &.animate {
      opacity: 1;
      translate: 0;
    }

    &:is(:hover, :focus-within) {
      transform: translateY(-0.125rem);
      filter: brightness(1.3);

      & > figure > img {
        scale: 1.05;
      }
    }
  }

  figure {
    overflow: hidden;
    aspect-ratio: 3/2;

    & img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: top;
      transition: scale 0.5s;
    }
  }

  .project-card__info {
    padding: 0.75rem;
    display: flex;
    flex-direction: column;
    row-gap: 0.75rem;
    background-image: var(--noise),
      linear-gradient(to top, black, var(--color-secondary));
    background-blend-mode: soft-light;
    flex-grow: 1;

    & .project-card__info--name {
      display: flex;
      column-gap: 0.5rem;
      align-items: center;
      color: var(--text-color-primary);

      & h3 {
        text-wrap: balance;
        font-weight: 700;
        line-height: normal;
        color: var(--text-color-primary);
      }
    }

    & ul {
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
    }

    p {
      font-size: 0.75rem;
      color: var(--text-color-secondary);
    }

    .project-card__info--buttons {
      display: flex;
      align-items: center;
      column-gap: 0.75rem;
      margin-top: auto;

      & a {
        display: flex;
        align-items: center;
        column-gap: 0.25rem;
        padding: 0.25rem 1.25rem;
        border: 1px solid var(--text-color-secondary);
        border-radius: 0.25rem;
        background-color: var(--color-secondary);
        color: var(--text-color-primary);
        box-shadow: var(--shadow-black-lg);
        font-size: 0.75rem;
        transition:
          background-color 0.3s,
          scale 0.3s;

        &:is(:hover, :focus-visible) {
          background-color: var(--color-primary);
          scale: 1.05;
        }

        &:active {
          translate: 0 0.125rem;
        }
      }
    }
  }
</style>
