---
import GitHubIcon from "../icons/GitHubIcon.astro";
import LinkIcon from "../icons/LinkIcon.astro";
import Badge from "./Badge.astro";

const { name, image, favicon, description, technologies, link, github } =
  Astro.props;
---

<li>
  <article class="minor_project">
    <div class="image-container">
      <img
        class="minor_project__image"
        src={`/images/${image}`}
        alt={`Portada de ${name}`}
        loading="lazy"
      />
    </div>
    <div class="minor_project_info">
      <div class="minor_project__title">
        <img
          src={`/images/favicons/${favicon}`}
          alt={`Favicon de ${name}`}
          width="20px"
          height="20px"
          loading="lazy"
        />
        <h3 class="minor_project__name">{name}</h3>
      </div>
      <ul
        class="minor_project_badges"
        aria-label="Tecnologías utilizadas en el proyecto"
      >
        {
          technologies.map(({ name, image, color }) => (
            <Badge name={name} image={image} color={color} />
          ))
        }
      </ul>
      <p class="minor_project__description">
        {description}
      </p>

      <div class="minor_project_buttons">
        <a
          href={link}
          target="_blank"
          rel="noopener noreferrer"
          class="minor_project__button"><LinkIcon /> Deploy</a
        >
        <a
          href={github}
          target="_blank"
          rel="noopener noreferrer"
          class="minor_project__button"
          ><GitHubIcon width="16" height="16" /> Código</a
        >
      </div>
    </div>
  </article>
</li>

<script>
  const $$cards = document.querySelectorAll(
    ".minor_project"
  ) as NodeListOf<HTMLElement>;

  const observerCallback = (entries, observer) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("animate");
        observer.unobserve(entry.target);
      }
    });
  };

  const observer = new IntersectionObserver(observerCallback, {
    threshold: 0.1,
  });

  $$cards.forEach(($card) => {
    observer.observe($card);
  });
</script>

<style>
  li {
    display: flex;
    --text-color-primary: rgb(248 250 252);
    --text-color-secondary: rgb(203 213 225);
    transition: filter 0.3s;

    &:hover {
      filter: brightness(1.3);
    }
  }

  .minor_project {
    display: flex;
    flex-direction: column;
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: var(--shadow-black-lg);
    opacity: 0;
    translate: 0 100px;
    transition:
      transform 0.3s,
      opacity 1s,
      translate 1s;

    &.animate {
      opacity: 1;
      translate: 0;
    }

    &:is(:hover, :focus-within) {
      transform: translateY(-0.125rem);
      .minor_project__image {
        scale: 1.05;
      }
    }

    .minor_project__title {
      display: flex;
      column-gap: 0.5rem;
      align-items: center;
      color: var(--text-color-primary);
    }

    .image-container {
      overflow: hidden;
    }

    .minor_project__image {
      width: 100%;
      aspect-ratio: 3/2;
      object-fit: cover;
      object-position: top;
      transition: scale 0.5s;
    }
  }

  .minor_project_info {
    padding: 0.75rem;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    row-gap: 0.75rem;
    background-image: var(--noise),
      linear-gradient(to top, black, var(--color-secondary));
    background-blend-mode: soft-light;
    flex-grow: 1;
    overflow: clip;
    overflow-clip-margin: padding-box;
  }

  .minor_project__name {
    text-wrap: balance;
    font-weight: 700;
    line-height: normal;
    color: var(--text-color-primary);
  }

  .minor_project_badges {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  .minor_project__description {
    font-size: 0.75rem;
    color: var(--text-color-secondary);
  }

  .minor_project_buttons {
    display: flex;
    align-items: center;
    column-gap: 0.75rem;
    margin-top: auto;
  }

  .minor_project__button {
    display: flex;
    align-items: center;
    column-gap: 0.25rem;
    padding: 0.25rem 1.25rem;
    border: 1px solid var(--text-color-secondary);
    border-radius: 0.25rem;
    background-color: var(--color-secondary);
    color: var(--text-color-primary);
    box-shadow: var(--shadow-black-lg);
    transition:
      background-color 0.3s,
      scale 0.3s,
      translate 0s;
    font-size: 0.75rem;

    &:hover {
      background-color: var(--color-primary);
      scale: 1.05;
    }

    &:focus-visible {
      background-color: var(--color-primary);
      scale: 1.05;
    }

    &:active {
      translate: 0 0.125rem;
    }

    & svg {
      width: 16px;
      height: 16px;
    }
  }
</style>
