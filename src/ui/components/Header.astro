---
import "@fontsource/lobster";
import HamburgerIcon from "../icons/HamburgerIcon.astro";
import CloseIcon from "../icons/CloseIcon.astro";
import ThemeButton from "./ThemeButton.astro";

const LINKS = [
  { label: "Proyectos", href: "projects" },
  { label: "Contáctame", href: "contact-me" },
];
---

<header>
  <div>
    <a
      id="logo-link"
      href="/"
      title="Inicio"
      class="hover:scale-[1.025] focus-visible:scale-[1.025] transition-transform z-10"
    >
      <h1 translate="no">
        <span aria-hidden="true">&lt;</span> Adan Rodriguez <span
          aria-hidden="true">/ &gt;</span
        ><span class="block text-xs absolute right-0 top-8"
          >Portafolio profesional</span
        >
      </h1>
    </a>
    <ThemeButton />
    <button
      id="menu-btn"
      aria-label="Abrir menú"
      aria-expanded="false"
      aria-controls="menu"
    >
      <HamburgerIcon />
      <CloseIcon />
    </button>
    <nav id="menu">
      <ul>
        {
          LINKS.map(({ href, label }) => (
            <li>
              <a class="nav-link" href={`#${href}`}>
                {label}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
  </div>
</header>

<style is:global>
  body:has(#menu-btn[aria-expanded="true"]) {
    @media (width < 768px) {
      overflow-y: hidden;
    }
  }

  #menu-btn[aria-expanded="false"] {
    & #hamburger-icon {
      display: flex;
    }

    & #close-icon {
      display: none;
    }
  }

  #menu-btn[aria-expanded="true"] {
    & #hamburger-icon {
      display: none;
    }

    & #close-icon {
      display: flex;
    }
  }
</style>

<style>
  header {
    > div {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      max-width: 58rem;
      padding: 10px 1rem;
      margin: 0 auto;
      justify-content: end;

      &:has(#menu-btn[aria-expanded="true"]) {
        & #menu {
          display: block;
        }
      }

      #logo-link {
        margin-right: auto;
      }

      h1 {
        font-size: 1.5rem;
        font-family: "Lobster", cursive;
        user-select: none;
        position: relative;
        top: -5px;
      }

      #menu-btn {
        transition: scale 0.3s;
        z-index: 10;

        &:hover {
          scale: 1.1;
        }

        &:focus-visible {
          scale: 1.1;
        }

        @media (width >= 768px) {
          display: none;
        }
      }

      #menu {
        display: none;
        position: absolute;
        inset: 0;
        z-index: 9;
        padding: 4rem 0 2.5rem;
        overflow-y: auto;
        scrollbar-color: var(--color-secondary), var(--bg-color);
        scrollbar-width: thin;
        background-color: var(--bg-color);
        background-image: radial-gradient(transparent, var(--bg-color)),
          repeating-linear-gradient(
            to bottom,
            var(--bg-grid-color) 0 1px,
            transparent 1px var(--bg-grid-size)
          ),
          repeating-linear-gradient(
            to right,
            var(--bg-grid-color) 0 1px,
            transparent 1px var(--bg-grid-size)
          ),
          var(--noise);
        background-attachment: fixed;
        background-blend-mode: luminosity;

        @media (width >= 768px) {
          display: block;
          width: auto;
          padding: 0;
          position: static;
        }

        ul {
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: 1.25rem;

          @media (width >= 768px) {
            flex-direction: row;
          }

          a {
            outline: none;

            &::after {
              content: "";
              display: block;
              height: 1px;
              background-color: var(--text-color-primary);
              transform: scale(0);
              transform-origin: left;
              transition: transform 0.3s;
            }
          }

          a {
            &:hover {
              &::after {
                transform: scale(1);
              }
            }
          }

          a {
            &:focus-visible {
              &::after {
                transform: scale(1);
              }
            }
          }
        }
      }
    }
  }
</style>

<script>
  const $menuBtn = document.querySelector("#menu-btn") as HTMLElement;
  const $navLinks = document.querySelectorAll(
    ".nav-link"
  ) as unknown as HTMLCollectionOf<HTMLElement>;
  const $menu = document.querySelector("#menu") as HTMLElement;

  const focusableElementsString =
    'a, button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])';
  const $$focusableElements = $menu.querySelectorAll(focusableElementsString);

  const $lastFocusableElement =
    $$focusableElements[$$focusableElements.length - 1];

  function trapFocus(e) {
    if (e.key === "Tab") {
      const $focusedElement = document.activeElement;
      if (e.shiftKey) {
        if ($focusedElement === $menuBtn) {
          e.preventDefault();
          $lastFocusableElement.focus();
        }
      } else {
        if ($focusedElement === $lastFocusableElement) {
          e.preventDefault();
          $menuBtn.focus();
        }
      }
    }
  }

  function showMenu() {
    $menuBtn.setAttribute("aria-expanded", "true");
    $menuBtn.setAttribute("aria-label", "Cerrar menú");
    document.addEventListener("keydown", trapFocus);
  }

  function hideMenu() {
    $menuBtn.setAttribute("aria-expanded", "false");
    $menuBtn.setAttribute("aria-label", "Abrir menú");
    document.removeEventListener("keydown", trapFocus);
  }

  function handleMenu() {
    if ($menuBtn.matches("[aria-expanded='false']")) {
      if (!document.startViewTransition) return showMenu();
      document.startViewTransition(() => showMenu());
    } else {
      if (!document.startViewTransition) return hideMenu();
      document.startViewTransition(() => hideMenu());
    }
  }

  $menuBtn.addEventListener("click", handleMenu);

  for (const $navLink of $navLinks) {
    $navLink.addEventListener("click", () => {
      if ($menuBtn.matches("[aria-expanded='true']")) {
        if (!document.startViewTransition) return hideMenu();
        document.startViewTransition(() => hideMenu());
      }
    });
  }
</script>
