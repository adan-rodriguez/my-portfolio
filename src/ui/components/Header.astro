---
import "@fontsource/lobster";
import HamburgerIcon from "../icons/HamburgerIcon.astro";
import CloseIcon from "../icons/CloseIcon.astro";
import ThemeButton from "./ThemeButton.astro";

const LINKS = [
  { label: "Proyectos", href: "projects" },
  { label: "Contáctame", href: "contact-me" },
];
---

<header>
  <div>
    <a
      id="logo-link"
      href="/"
      aria-label="Link que lleva a la página principal"
    >
      <h1 translate="no">
        <span aria-hidden="true">&lt;</span> Adan Rodriguez <span
          aria-hidden="true">/ &gt;</span
        ><span class="block text-xs absolute right-0 top-8"
          >Portafolio profesional</span
        >
      </h1>
    </a>
    <ThemeButton />
    <button
      id="menu-btn"
      aria-label="Abrir menú"
      aria-expanded="false"
      aria-controls="menu"
    >
      <HamburgerIcon />
      <CloseIcon id="close-menu-icon" />
    </button>
    <nav id="menu">
      <ul>
        {
          LINKS.map(({ href, label }) => (
            <li>
              <a class="nav-link" href={`#${href}`}>
                {label}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
  </div>
</header>

<style is:global>
  body:has(#menu-btn[aria-expanded="true"]) {
    @media (width < 768px) {
      overflow-y: hidden;
    }
  }

  #menu-btn[aria-expanded="false"] {
    & #hamburger-icon {
      display: flex;
    }

    & #close-menu-icon {
      display: none;
    }
  }

  #menu-btn[aria-expanded="true"] {
    & #hamburger-icon {
      display: none;
    }

    & #close-menu-icon {
      display: flex;
    }
  }
</style>

<style>
  header {
    > div {
      display: flex;
      flex-wrap: wrap;
      max-width: 58rem;
      padding: 10px 0.5rem 10px 1rem;
      margin: 0 auto;

      @media (width >= 768px) {
        padding-right: 0;
      }

      &:has(#menu-btn[aria-expanded="true"]) {
        & #menu {
          display: block;
          opacity: 1;

          @starting-style {
            opacity: 0;
          }
        }
      }

      #logo-link {
        margin-right: auto;
        z-index: 2;
        transition: scale 0.3s;

        &:is(:hover, :focus-visible) {
          scale: 1.025;
        }
      }

      h1 {
        font-size: 1.5rem;
        font-family: "Lobster", cursive;
        user-select: none;
        position: relative;
        line-height: 40px;
      }

      #menu-btn {
        z-index: 2;
        padding: 0.5rem;
        border-radius: 0.5rem;
        transition: background-color 0.3s;

        &:is(:hover, :focus-visible) {
          background-color: rgb(var(--color-primary-rgb) / 50%);
        }

        @media (width >= 768px) {
          display: none;
        }

        @media (scripting: none) {
          display: none;
        }
      }

      #menu {
        display: none;
        opacity: 0;
        z-index: 1;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        overflow-y: auto;
        scrollbar-width: thin;
        padding-block: 4rem 1rem;
        background-color: var(--bg-color);
        background-image: var(--main-gradient);
        background-attachment: fixed;
        background-blend-mode: luminosity;
        transition:
          display 0.15s,
          opacity 0.15s;
        transition-behavior: allow-discrete;

        @media (width >= 768px) {
          display: block;
          opacity: 1;
          position: static;
          width: auto;
          height: auto;
          padding: 0;
          background: inherit;
          overflow-y: visible;
          transition: none;
          transition-behavior: none;
        }

        @media (scripting: none) {
          display: none;
        }

        ul {
          display: flex;
          flex-direction: column;
          text-align: center;

          @media (width >= 768px) {
            flex-direction: row;
          }

          a {
            display: block;
            outline: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            transition: background-color 0.3s;

            &:is(:hover, :focus-visible) {
              background-color: rgb(var(--color-primary-rgb) / 50%);
            }
          }
        }
      }
    }
  }
</style>

<script>
  const $menuBtn = document.querySelector("#menu-btn") as HTMLElement;
  const $navLinks = document.querySelectorAll(
    ".nav-link"
  ) as unknown as HTMLCollectionOf<HTMLElement>;
  const $menu = document.querySelector("#menu") as HTMLElement;

  const focusableElementsString =
    'a, button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])';
  const $$focusableElements = $menu.querySelectorAll(focusableElementsString);

  const $lastFocusableElement =
    $$focusableElements[$$focusableElements.length - 1];

  function trapFocus(e) {
    if (e.key === "Tab") {
      const $focusedElement = document.activeElement;
      if (e.shiftKey) {
        if ($focusedElement === $menuBtn) {
          e.preventDefault();
          $lastFocusableElement.focus();
        }
      } else {
        if ($focusedElement === $lastFocusableElement) {
          e.preventDefault();
          $menuBtn.focus();
        }
      }
    }
  }

  function showMenu() {
    $menuBtn.setAttribute("aria-expanded", "true");
    $menuBtn.setAttribute("aria-label", "Cerrar menú");
    window.scrollTo({ top: 0, behavior: "smooth" });
    document.addEventListener("keydown", trapFocus);
  }

  function hideMenu() {
    $menuBtn.setAttribute("aria-expanded", "false");
    $menuBtn.setAttribute("aria-label", "Abrir menú");
    document.removeEventListener("keydown", trapFocus);
  }

  function handleMenu() {
    if ($menuBtn.matches("[aria-expanded='false']")) {
      showMenu();
    } else {
      hideMenu();
    }
  }

  $menuBtn.addEventListener("click", handleMenu);

  for (const $navLink of $navLinks) {
    $navLink.addEventListener("click", () => {
      if ($menuBtn.matches("[aria-expanded='true']")) hideMenu();
    });
  }
</script>
